#!/bin/sh -e
### BEGIN INIT INFO
# Provides:          isatapd
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: isatapd creates and maintains an ISATAP tunnel (rfc5214) in Linux
# Description:       isatapd creates and maintains an ISATAP tunnel (rfc5214) in Linux.
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/sbin/isatapd
NAME=isatapd
DESC="ISATAP client"

PIDFILE=/var/run/$NAME.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
MTU=1280		# IPv6 MTU
DAEMON_OPTS=""          # Additional options given to the server
ISATAP_ROUTERS="isatap"

STARTTIME=1

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

if [ "x$RUN" != "xyes" ] ; then
    log_failure_msg "$NAME disabled, please adjust the configuration to your needs "
    log_failure_msg "and then set RUN to 'yes' in /etc/default/$NAME to enable it."
    exit 0
fi

set -e

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
                --exec $DAEMON -- --daemon --pid $PIDFILE --mtu $MTU $DAEMON_OPTS $ISATAP_ROUTERS
        errcode=$?
        return $errcode
}

stop_server() {
        start-stop-daemon --stop --quiet --pidfile $PIDFILE --retry 2 \
                   --oknodo --exec $DAEMON
        errcode=$?
        return $errcode
}

reload_server() {
        [ ! -f "$PIDFILE" ] && return 1
        pid=`cat $PIDFILE`
        kill -1 $pid
        errcode=$?
        return $errcode
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        start_server
        log_end_msg $?
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        stop_server
        log_end_msg $?
        ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        running || errcode=$?
        log_end_msg $errcode
        ;;
  status)
        status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
        ;;
  reload)
        log_daemon_msg "Reloading $DESC" "$NAME"
        if running ; then
	    reload_server
        else
            log_progress_msg "$NAME is not running"
            log_end_msg 1
            exit 1
        fi
        ;;
  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload|reload|status}" >&2
        exit 1
        ;;
esac

exit 0
